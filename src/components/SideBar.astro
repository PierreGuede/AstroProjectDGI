---
import { list } from "postcss";

export interface Props {
  links: {
    title: string;

    attributes: {
      id: string;
      title: string;
    };

    childAttributes: {
      id: string;
      title: string;
    };

    list: {
      title: string;
      subList: {
        title: string;
        enum: string[];
      }[];
    }[];
  };
}

const { links } = Astro.props;
---

<script>
  const toggleSideBar = document.getElementById("toggle-sidebar") as HTMLButtonElement;
  const sidebar = document.getElementById("sidebar") as HTMLDivElement;
  const main = document.getElementById("main") as HTMLDivElement;

  toggleSideBar?.addEventListener("click", () => {
    sidebar?.classList.toggle("-translate-x-full");

    if (sidebar?.classList.contains("-translate-x-full")) {
      main?.classList.add("w-full");
      main?.classList.remove("w-3/4");
    } else {
      main?.classList.remove("w-full");
      main?.classList.add("w-3/4");
      main?.classList.add("absolute");
      main?.classList.add("right-0");
    }
  });
</script>

<aside
  id="sidebar"
  class="h-screen w-1/4 fixed z-20 -translate-x-full transition-transform ease-in duration-150 overflow-y-auto drop-shadow-md"
  aria-label="Sidebar"
>
  <div class="overflow-y-auto overflow-x-hidden py-4 px-2 bg-gray-50 dark:bg-gray-800">
    <ul class="space-y-2 py-2">
      {
        links?.title && (
          <li>
            <a
              href="#"
              class="flex items-center p-2 text-base font-normal text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <span class="ml-3 font-bold">{links.title}</span>
            </a>
          </li>
        )
      }
      {
        links?.list.map((link, index) => (
          <li class="mt-16">
            <button
              type="button"
              class="flex items-center p-2 w-full text-base font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
              aria-controls="dropdown-example"
              data-collapse-toggle="dropdown-example"
            >
              <a href={`#${links.attributes.id + ++index}`}>
                <span class="flex-1 ml-3 text-left whitespace-nowrap font-bold" sidebar-toggle-item>
                  {`${links.attributes.title} ${index} : ${link.title}`}
                </span>
              </a>
            </button>
            <ul id="" class="space-y-2 py-2">
              {link.subList?.map(
                (subLink, subIndex) =>
                  (links.childAttributes && (
                    <li>
                      <a
                        href={`#${links.attributes.id + index}-${links?.childAttributes.id + ++subIndex}`}
                        class="flex items-center pl-11 w-full text-sm font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700 text-ellipsis overflow-hidden"
                      >
                        {`${links?.childAttributes.title} ${subIndex} - ${subLink.title}`}
                      </a>
                    </li>
                  )) ||
                  (!links.childAttributes && (
                    <li>
                      <a
                        href={`#${links.attributes.id + index}-${++subIndex}`}
                        class="flex items-center pl-11 w-full text-sm font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700 text-ellipsis truncate"
                      >
                        {`${subIndex} - ${subLink.title}`}
                      </a>
                    </li>
                  ))
              )}
            </ul>
          </li>
        ))
      }
    </ul>
  </div>
</aside>
